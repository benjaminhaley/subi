<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>subi</title>
    <meta name="description" content="search for and enter data related to the subi radiobiology archive">
    <meta name="author" content="benjamin.haley@gmail.com">
    <script src="jquery-1.7.1.min.js"></script>
    <script src="jquery-ui-1.8.16.min.js"></script>
    <script src="jquery.jeditable.mini.js"></script>


    <!-- Le styles -->
    <link href="jquery-ui-1.8.css" rel="stylesheet"/>
    <link href="bootstrap.min.css" rel="stylesheet"/>
    <style type="text/css">
      /* Override some defaults */
      html, body {
        background-color: #eee;
      }
      body {
        padding-top: 40px; /* 40px to make the container go all the way to the bottom of the topbar */
      }
      .container > footer p {
        text-align: center; /* center align it with the container */
      }

      /* The white background content wrapper */
      .content {
        background-color: #fff;
        padding: 20px;
        margin: 0 -20px; /* negative indent the amount of the padding to maintain the grid system */
        -webkit-border-radius: 0 0 6px 6px;
        -moz-border-radius: 0 0 6px 6px;
        border-radius: 0 0 6px 6px;
        -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.15);
        -moz-box-shadow: 0 1px 2px rgba(0,0,0,.15);
        box-shadow: 0 1px 2px rgba(0,0,0,.15);
      }

      /* Page header tweaks */
      .page-header {
        background-color: #f5f5f5;
        padding: 20px 20px 10px;
        margin: -20px -20px 20px;
      }

     /* Give a quick and non-cross-browser friendly divider */
      .content .span4 {
        margin-left: 0;
        padding-left: 19px;
        border-left: 1px solid #eee;
      }

      /* A place to notify */
      .notify {
        display: none;
        position: fixed;
        width:100%;
      }

    </style>

  </head>

  <body>


    <h4><div class="notify alert-message"></div></h4>
    <div class="topbar">
      <div class="fill">
        <div class="container">
          <a class="brand" href="#">subi</a>
          <ul class="nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
          </ul>
        </div>
      </div>
    </div>

    <div class="container">
      <div class="content">
        <div class="page-header">
          <h1>SUBI <small> radiobiology archive</small></h1>
        </div>
        <div class="row">
          <div class="span10">

<script language="javascript" type="text/javascript">
    $(function(){

        function notify(text)
        {
            var close_div = '<a href="javascript:void(0)" class="close close_notify"> close x &nbsp &nbsp </a>';
            $('.notify').html(close_div + text).fadeIn(1000);
            $('.close_notify').click(function(){ $('.notify').fadeOut()});
        }

        function read_search()
        {
            var search_terms = $("#search").val();
            return search_terms;
        }

        function write_search(search_terms)
        {
            $("#search").val(search_terms);
        }

        function get_offset()
        {
            return $("#search").val();
        }

        function hash2dict()
        {
            // setup our dictionary
            var dict = new Object();

            // get the current url hash value (remove the #)
            hash = window.location.hash;
            hash = hash.substring(1, hash.length);

            // if hash is empty return an empty dictionary
            if (hash.length === 0){
                return dict
            }

            // convert
            pairs = hash.split('&');
            for (p in pairs)
            {
                param = pairs[p].split('=')[0];
                value = pairs[p].split('=')[1];

                dict[param] = value;
            }

            return dict;
        }

        function dict2hash(dict)
        {
            hash = "";
            for (var param in dict)
            {
                hash = hash + param + '=' + dict[param] + "&";
            }

            // remove the final '&'
            hash = hash.substring(0, hash.length - 1);

            window.location.hash = hash;
        }

        function write_url(param, value)
        {
            dict = hash2dict();
            dict[param] = value;
            dict2hash(dict);
        }

        function read_url(param, default_value)
        {
            dict = hash2dict();
            value = dict[param];
            if (is_in_url(param)){
                return value;
            } else {
                return default_value;
            }
        }

        function is_in_url(param)
        {
            dict = hash2dict();
            value = dict[param];
            if (undefined === value){
                return false;
            } else {
                return true;
            }
        }

        function get_animal_textarea(text, id)
        {
            // Force string to text
            text = String(text);

            // Choose a reasonable height
            var baseheight = 12;
            var lineheight = 18;
            var chars_per_line = 50;
            var margin = 1.2;
            var lines = Math.floor( margin * text.length / chars_per_line ) + 1;
            var height = baseheight + lineheight * lines;

            // Build a fitted text area
            var animal_textarea = 
                '<textarea '
                +   'id="' + id + '" '
                +   'class="span10" '
                +   'style="height: ' + height + 'px; "'
                +   '>' + text + '</textarea>';

            return animal_textarea;
        }

        function bind_click_highlight(id)
        {
            // Bind click event so all text is highlighted
            // this will allow users to quickly replace values
            $('#' + id).click(function(){
                this.select();
            });
        }

        function bind_animal_autocomplete(id)
        {
            // Extract column name from id
            id = $("#" + id).attr('id');
            column = id.substring('animal_text_area_'.length);

            // Construct a request url
            var url = 'subi/ajax?' + 
                      'command=get_unique_col_values' +
                      '&col_name=' + column +
                      '&min_freq=2';

            // try to get autocomplete values
            // don't bother users with errors
            $.getJSON(url, function(response) {

                // get autocomplete values from db
                var suggestions = [];
                $.each(response['data'], function(i, val){
                    suggestions.push(String(val));
                });

                // Add them to form element
                $("#" + id).autocomplete({
                    autoFocus: true,           // First element is selected
                    delay: 0,                  // delay because data is local
                    source: suggestions,
                    change: function(){        // call text areas change event
                        $(this).change();      // so it knows to make ajax call
                        }
                });
            });

        }

        function bind_update_animal_field(id)
        {
            // Get animal id and column name from the page
            animal_id = $("#animal_text_area_animal_id").attr('value');
            column = $("#" + id).attr('id').substring('animal_text_area_'.length);
            value = $("#" + id).attr('value').trim();

            // Construct a request url
            var url = 'subi/ajax?' + 
                      'command=update_animal_field' +
                      '&animal_id=' + animal_id +
                      '&col_name=' + column +
                      '&col_value=' + value;

            // Send the request
            // alert users of any errors
            $.getJSON(url, function(response) {
                var is_error = check_error(response);

                if (is_error) {
                    handle_error(response['error']);
                }
            });
        }

        function bind_col_update(id, value, settings){

            // strip whitespace from value
            value = $.trim(value);

            col_name = id.substring('animal_column_'.length);
            url = 'subi/ajax?' +
                'command=update_col&' +
                'col_name=' + col_name + '&' +
                'field_name=col_description&' +
                'field_value=' + value;

            // Request the results
            is_success = $.getJSON(url, function(response) {

                var is_error = check_error(response);

                if (is_error) {
                    handle_error(response['error']);
                    return(false);
                } else {
                    return(true);
                }
            });

            if (is_success){
                return (value);
            } else {
                return ('try again');
            }
        }

        // It shouldn't be hard to add a new column to the end
        // for now we only support varchar
        function bind_create_col(create_col_id)
        {
            // Give them the right to execute
            $("#" + create_col_id).click(function(){

                // fetch column to create
                col_name = $(this).attr('id').substring('create_column_'.length);

                // compose delete url
                url = 
                    "subi/ajax?" + 
                    "command=create_col&" +
                    "col_type=VARCHAR(120)&" +
                    "col_desc=Frick to edit&" +
                    "col_name=" + col_name;

                // engage
                $.getJSON(url, function(response) {

                    var is_error = check_error(response);

                    if (is_error) {
                        handle_error(response['error']);
                    } else {
                        // reload to add the new column
                        load_page();
                    }
                });
            });
        }


        // We want to make it hard to accidentally delete columns
        // so there will be an extra notification step
        function bind_delete_col(delete_col_id)
        {
            // Special confirmation id to avoid confusion
            delete_confirmation_id = 'confirm_' + delete_col_id;

            // Give the user a second chance
            confirmation_msg = 
                "Are you sure you want to delete this value for all animals? " + 
                "<br/><a href='javascript:void(0)' " + 
                "id=" + delete_confirmation_id + " " +
                "class='btn danger close_notify'" + ">" +
                "Delete All" + "</a>" +
                " or <a href='javascript:void(0)' " + 
                "class='btn close_notify'" + ">" + 
                "Cancel" + "</a>";

            notify(confirmation_msg);

            // Give them the right to execute
            $("#" + delete_confirmation_id).click(function(){
                
                // fetch column to delete
                col_name = $(this).attr('id').substring('confirm_delete_column_'.length);

                // compose delete url
                url = 
                    "subi/ajax?" + 
                    "command=delete_col&" +
                    "col_name=" + col_name;

                // engage
                $.getJSON(url, function(response) {

                    var is_error = check_error(response);

                    if (is_error) {
                        handle_error(response['error']);
                    } else {
                        // reload to clear dead column
                        load_page();
                    }
                });
            });
        }

        function get_delete_col_link(delete_col_id)
        {
            link = "<a " +
                "href='javascript:void(0)'" +  // make it appear clickable 
                "id='" + delete_col_id + "'" + 
                "class='small close'" +        // look like a close
                ">x</a>";
            return(link);
        }

        function get_create_col_link(create_col_id)
        {
            link = "<a " +
                "href='javascript:void(0)'" +  // make it appear clickable 
                "id='" + create_col_id + "'" + 
                "class='small close'" +        // look like a close
                ">+ add field</a>";
            return(link);
        }

        // Output information on one attribute of the animal
        // and bind controls to manipulate this attribute
        function write_animal_field(animal, col_info, col_name)
        {
           // Extract useful terms
            var value = animal[col_name];
            var col_description = '';
            for (i in col_info){
                col = col_info[i];
                if (col['col_name'] === col_name){
                    col_description = col['col_description'];
                }
            }

            // Temporarily add spaces
            if (value != null){
                value = String(value).replace(/[ABCDEF]/g, " ");
            }

            // Convert nulls to black lines for readablity
            if (value == null){
                value = "";
            }
           // Define text area
            var id = 'animal_text_area_' + col_name;
            var col_id = 'animal_column_' + col_name;
            var delete_col_id = 'delete_column_' + col_name;

            // Don't allow people to delete the animal_id
            if (col_name === 'animal_id'){
                delete_col_link = '';
            } else {
                delete_col_link = get_delete_col_link(delete_col_id);
            }

            $("#animal").find('tbody').append(
                    "<tr>" + 
                    "<td>" + delete_col_link + "</td>" +
                    "<td id='" + col_id + "'>" + col_description + "</td>" +
                    "<td>" + get_animal_textarea(value, id) + "</td>" +
                    "</tr>"
                    );

            // Bind click event so all text is highlighted
            // this will allow users to quickly replace values
            bind_click_highlight(id);

            // Bind autocomplete when focused on
            // This way we use ajax as needed
            $("#" + id).focus(function(){
                bind_animal_autocomplete($(this).attr('id'));
            });

            // Update db when element is changed
            $("#" + id).change(function() {
                bind_update_animal_field($(this).attr('id'));
            });

            // Make columns editable
            $("#" + col_id).editable(function(value, settings){
                value = bind_col_update($(this).attr('id'), value, settings)
                return value;
                }, {tooltip   : 'Click or die...'}
            );

            // Allow users to delete Columns
            $("#" + delete_col_id).click(function(){
                bind_delete_col($(this).attr('id'))
            });

        }

        // Should output a random string of letters
        // with a low likelyhood of collision
        function get_rand_name()
        {
            var random_name = '';
            var name_length = 12;       // 12 is all the db allows
                                        // it should be plenty

            // we need the identifiers to be letters
            var letters = ['a','b','c','d','e','f','g','h','i','j'];

            // create the string
            for (i = 0; i < 12; i = i + 1)
            {
                var random_int = Math.floor(Math.random()*10);
                var random_letter = letters[random_int];
                random_name += random_letter;
            }

            return random_name;
        }

        // Output all the data for an individual animal
        // and bind to it all the controls needed to 
        // change properties of the animal
        function write_animal(animal, col_info)
        {
            // Clear existing animal
            $("#animal").find('tbody').html("");

            // Write in new animal
            for (col_name in animal)
            {
                write_animal_field(animal, col_info, col_name);
            }

            // Give the option to add a new column

            // Create a UI element
            var new_col_name = get_rand_name();
            var create_col_link = get_create_col_link(create_col_id);
            var create_col_id = 'create_column_' + new_col_name;
            $("#animal").find('tbody').append(
                    "<tr>" + 
                        "<td id='" + create_col_id + "'>" + create_col_link + "</td>" +
                        "<td>" + "</td>" +
                        "<td>" + "</td>" +
                    "</tr>"
            );

            // Bind the controller
            $("#" + create_col_id).click(function(){
                bind_create_col($(this).attr('id'))
            });
        }

                        write_animal_to_status(response['data']['animal_id']);

        function write_animal_to_status(animal_id)
        {
            // Add count to page and links to go forwards and back
            status_html = 'Animal with id: ' + animal_id;
            $("#status").html(status_html);
        }

        function write_count_to_status(count, offset)
        {
            // Make a human readable count
            var offset = parseInt(read_url('offset'));
            var result_number = offset + 1;
            var count = parseInt(count);

            // Add count to page and links to go forwards and back
            status_html = '';

            // Deal with the case that no animals were found
            if (count === 0)
            {
                status_html = "No animals found.";
            }

            // Deal with the case that animals were found
            else
            {
                // Show previous button if applicable
                if (result_number > 1){
                    status_html += 
                        "<a " +
                        "id='prev' " +
                        "href='javascript:void(0)' " +   // change pointer to selector
                        "tabindex='-1'" +                // allow tab to jump straight to inputs
                        ">previous</a> ";
                }

                // Always show count
                status_html += " . Animal " + result_number + " of " + count + " . ";

                // Show next button if applicaable
                if (result_number < count){
                    status_html += 
                        "<a " + 
                        "id='next' " + 
                        "href='javascript:void(0)'" +    // change pointer to glove
                        "tabindex='-1'" +                // allow tab to jump straight to inputs
                        ">next</a>";
                }
            }

            // Actually write count to status
            $("#status").html(status_html);

            // Bind events to forwards and back links
            search_terms = read_url('search_terms');
            $("#prev").click(function(){
                    write_url('offset', offset - 1);
                    search(search_terms);
                    });

            $("#next").click(function(){
                    write_url('offset', offset + 1);
                    search(search_terms);
                    });
        }

        function check_error(response)
        {
            return ! response['ok'];
        }

        function handle_error(error)
        {
            message = 
                "There has been an error: <br/>"
                + "<small>" + error + "'" + "</small><br/>"
                + "Email this error message to benjamin.haley@gmail.com";

            notify(message);
        }

        function write_col_info(col_info)
        {
            for (column in col_info)
            {
                // Get some useful identifiers
                var col_name = col_info[column]['col_name'];
                var col_description = col_info[column]['col_description'];
                var col_id = 'animal_column_' + col_name;

                // Use column description for human readability
                $("#" + col_id).text(col_description);
            }
        }

        // Search for animals
        function search(search_terms){

            // Trim the search
            search_terms = $.trim(search_terms);

            // Let the user know you are looking
            $("#animal").find('tbody').html("");
            $("#status").html("loading...");

            // Write the search terms into the url for back button support
            write_url('search_terms', search_terms);

            // Determine how to search

            // Don't search for nothing
            if (search_terms.length < 1){
                return null
            }

            // We must make a special path to search for an animal
            is_id_request = ('animal_id:' === search_terms.substring(0, 'animal_id:'.length));
            if (is_id_request){
                animal_id = search_terms.substring('animal_id:'.length);
                search_by_id(animal_id)
                return null;
            }

            // If no special search was requested perform a general full
            // text search
            search_by_fulltext(search_terms);
        }

        function search_by_id(animal_id)
        {
            var url = 'subi/ajax?' + 
                      'command=lookup_animal' +
                      '&animal_id=' + animal_id;

            // Request the results
            $.getJSON(url, function(response) {

                var is_error = check_error(response);

                if (is_error) {
                    handle_error(response['error']);
                } else {
                    // Write animal after we are sure we have column
                    // data, usually this will be cached.
                    get_col_info(function(col_info){
                        write_animal(response['data'], col_info);
                        write_animal_to_status(response['data']['animal_id']);
                    });
               }
            })
        }


        function search_by_fulltext(search_terms)
        {
            // Construct a request url
            var offset = read_url('offset', 0);

            // write the offset into the url for back button support
            write_url('offset', offset);

            var url = 'subi/ajax?' + 
                      'command=search_fulltext' +
                      '&limit=1' +
                      '&offset=' + offset +
                      '&search_terms=' + search_terms;

            // Request the results
            $.getJSON(url, function(response) {

                var is_error = check_error(response);

                if (is_error) {
                    handle_error(response['error']);
                } else {
                    // Write animals after we are sure we have column
                    // data, usually this will be cached.
                    get_col_info(function(col_info){
                        write_animal(response['data']['animals'][0], col_info);
                        write_count_to_status(response['data']['count'], offset);
                    });
               }
            })
        }

        // Load column descriptions so they can always be found
        function get_col_info(callback)
        {
            // try to retrieve from cache when possible
            cached_info = $("#col_info").data('col_info');
            if (typeof cached_info !== "undefined"){
                callback(cached_info);
            }

            var url = 'subi/ajax?' + 
                      'command=col_info';
            $.getJSON(url, function(response) {

                var is_error = check_error(response);

                if (is_error) {
                    handle_error(response['error']);
                } else {
                    var col_info = response['data'];

                    // Store it in the DOM for later
                    $("#col_info").data('col_info', col_info);
                    callback(col_info);
                }
            });
        }


        function load_page()
        {
            // Search for terms
            var offset = read_url('offset', 0);
            var search_terms = read_url('search_terms');
            write_search(search_terms);
            search(search_terms);

            // Focus on search bar
            $("#search").select();
        }

        // Handle a page load
        if (is_in_url("search_terms")){
            load_page();
        }

        // Handle a submitted search
        $("#search_form").submit(function() {
            var offset = 0;
            var search_terms = read_search();
            write_url('offset', offset);
            search(search_terms);
            return false;
        });

        // Handle an anchor change (e.g. localhost#old -> localhost#new)
        window.onhashchange = function(){
            load_page();
        }

   });

</script>

          <!-- Invisible fields for data storage -->
          <span id="col_info"></span>

          <!-- Search form -->
          <form id="search_form" class="form-stacked" action="">
            <fieldset>
              <div class="clearfix">
                <div class="input">
                  <input class="xlarge span9" id="search" type="text" placeholder="search"/>
                  <input name="command" type="hidden" value="search_fulltext"/>
                </div>
              </div><!-- /clearfix -->
            </fieldset>
          </form>

          <div id="status" class="span10"></div>
          <table class="span10" id="animal">
              <tbody>
              </tbody>
          </table>

          </div>
          <div class="span4">
            <h3>Introduction</h3>
            <p>
              Built by Ben Haley, and Dave Paunesku
              for the radiobiology researchers at
              The Southern Urals Biophysics Institute.
              Courtesy of the 
              <a href='http://janus.northwestern.edu/wololab/'>Woloschak Laboratory</a>
              and the U.S. Department of Energy.
            </p>
            <p>
              For questions contact
              benjamin.haley@gmail.com
              </p>
          </div>
        </div>
      </div>

      <footer>
      <p>Ask Gayle what should go here acknowledge funders, contact info, etc.</p>
      </footer>

    </div> <!-- /container -->

  </body>
</html>
